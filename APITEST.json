{
	"info": {
		"_postman_id": "d40de5f4-451d-46cd-84f6-1db8a7f21e3a",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40251349"
	},
	"item": [
		{
			"name": "API_TC_01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.all.keys('coord', 'weather', 'base', 'main', 'visibility', 'wind', 'clouds', 'dt', 'sys', 'timezone', 'id', 'name', 'cod');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Temperature is a valid number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.main.temp).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Weather array should have at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.weather).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{vault:openweather-api:value}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "appid",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q=London&appid={{apiKey}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "London"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API_TC_02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - cod and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('cod');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - cod and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('cod');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of specific header in the response\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{vault:openweather-api:value}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "appid",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q=InvalidCity&appid={{apiKey}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "InvalidCity"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API_TC_03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response JSON\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('coord');\r",
							"    pm.expect(responseData).to.have.property('weather');\r",
							"    pm.expect(responseData).to.have.property('base');\r",
							"    pm.expect(responseData).to.have.property('main');\r",
							"    pm.expect(responseData).to.have.property('visibility');\r",
							"    pm.expect(responseData).to.have.property('wind');\r",
							"    pm.expect(responseData).to.have.property('clouds');\r",
							"    pm.expect(responseData).to.have.property('dt');\r",
							"    pm.expect(responseData).to.have.property('sys');\r",
							"    pm.expect(responseData).to.have.property('timezone');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('cod');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the required fields in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('coord');\r",
							"    pm.expect(responseData).to.have.property('weather');\r",
							"    pm.expect(responseData).to.have.property('base');\r",
							"    pm.expect(responseData).to.have.property('main');\r",
							"    pm.expect(responseData).to.have.property('visibility');\r",
							"    pm.expect(responseData).to.have.property('wind');\r",
							"    pm.expect(responseData).to.have.property('clouds');\r",
							"    pm.expect(responseData).to.have.property('dt');\r",
							"    pm.expect(responseData).to.have.property('sys');\r",
							"    pm.expect(responseData).to.have.property('timezone');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('cod');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Coord field should be an object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.coord).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Weather field should be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.weather).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Base field should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.base).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Main field should be an object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.main).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Visibility field should be a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.visibility).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Wind field should be an object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.wind).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Clouds field should be an object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.clouds).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Sys field should be an object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.sys).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Timezone field should be a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.timezone).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Id field should be a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Name field should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Cod field should be a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.cod).to.be.a('number');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{vault:openweather-api:value}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "appid",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q=London",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "London"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API_TC_04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response JSON\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('coord');\r",
							"    pm.expect(responseData).to.have.property('weather');\r",
							"    pm.expect(responseData).to.have.property('base');\r",
							"    pm.expect(responseData).to.have.property('main');\r",
							"    pm.expect(responseData).to.have.property('visibility');\r",
							"    pm.expect(responseData).to.have.property('wind');\r",
							"    pm.expect(responseData).to.have.property('clouds');\r",
							"    pm.expect(responseData).to.have.property('dt');\r",
							"    pm.expect(responseData).to.have.property('sys');\r",
							"    pm.expect(responseData).to.have.property('timezone');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('cod');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Temperature, feels_like, temp_min, temp_max, pressure, humidity, visibility, and wind speed are non-negative numbers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.main.temp).to.be.at.least(0);\r",
							"    pm.expect(responseData.main.feels_like).to.be.at.least(0);\r",
							"    pm.expect(responseData.main.temp_min).to.be.at.least(0);\r",
							"    pm.expect(responseData.main.temp_max).to.be.at.least(0);\r",
							"    pm.expect(responseData.main.pressure).to.be.at.least(0);\r",
							"    pm.expect(responseData.main.humidity).to.be.at.least(0);\r",
							"    pm.expect(responseData.visibility).to.be.at.least(0);\r",
							"    pm.expect(responseData.wind.speed).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Weather array is present and has expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('weather').that.is.an('array').and.that.is.not.empty;\r",
							"    pm.expect(responseData.weather).to.have.lengthOf(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{vault:openweather-api:value}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "appid",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q=London&appid=invalidApiKey\n",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "London"
						},
						{
							"key": "appid",
							"value": "invalidApiKey\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API_TC_05",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Coord object has the correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.coord).to.be.an('object');\r",
							"    pm.expect(responseData.coord).to.have.property('lon').that.is.a('number');\r",
							"    pm.expect(responseData.coord).to.have.property('lat').that.is.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Weather array should have the expected structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.weather).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
							"    responseData.weather.forEach(function(weatherObj) {\r",
							"        pm.expect(weatherObj).to.be.an('object');\r",
							"        pm.expect(weatherObj.id).to.exist.and.to.be.a('number');\r",
							"        pm.expect(weatherObj.main).to.exist.and.to.be.a('string');\r",
							"        pm.expect(weatherObj.description).to.exist.and.to.be.a('string');\r",
							"        pm.expect(weatherObj.icon).to.exist.and.to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Main object structure is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.main).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.main.temp).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.main.feels_like).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.main.temp_min).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.main.temp_max).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.main.pressure).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.main.humidity).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.main.sea_level).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.main.grnd_level).to.exist.and.to.be.a('number');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{vault:openweather-api:value}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "appid",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q=New%20York&appid={{apiKey}}\n",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "New%20York"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API_TC_06",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('coord');\r",
							"    pm.expect(responseData).to.have.property('weather');\r",
							"    pm.expect(responseData).to.have.property('base');\r",
							"    pm.expect(responseData).to.have.property('main');\r",
							"    pm.expect(responseData).to.have.property('visibility');\r",
							"    pm.expect(responseData).to.have.property('wind');\r",
							"    pm.expect(responseData).to.have.property('clouds');\r",
							"    pm.expect(responseData).to.have.property('dt');\r",
							"    pm.expect(responseData).to.have.property('sys');\r",
							"    pm.expect(responseData).to.have.property('timezone');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('cod');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Temperature is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.main.temp).to.be.a('number');\r",
							"    pm.expect(responseData.main.temp).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Country code in sys object should exist and be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.sys).to.exist;\r",
							"    pm.expect(responseData.sys.country).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{vault:openweather-api:value}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "appid",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q=London&appid={{apiKey}}\n",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "London"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}\n"
						}
					]
				}
			},
			"response": []
		}
	]
}